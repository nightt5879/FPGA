# 
# Synthesis run script generated by Vivado
# 

set TIME_start [clock seconds] 
namespace eval ::optrace {
  variable script "E:/robot/project/FPGA/ZedBoard/lab_4/lab_4.runs/synth_1/wave_gen.tcl"
  variable category "vivado_synth"
}

# Try to connect to running dispatch if we haven't done so already.
# This code assumes that the Tcl interpreter is not using threads,
# since the ::dispatch::connected variable isn't mutex protected.
if {![info exists ::dispatch::connected]} {
  namespace eval ::dispatch {
    variable connected false
    if {[llength [array get env XILINX_CD_CONNECT_ID]] > 0} {
      set result "true"
      if {[catch {
        if {[lsearch -exact [package names] DispatchTcl] < 0} {
          set result [load librdi_cd_clienttcl[info sharedlibextension]] 
        }
        if {$result eq "false"} {
          puts "WARNING: Could not load dispatch client library"
        }
        set connect_id [ ::dispatch::init_client -mode EXISTING_SERVER ]
        if { $connect_id eq "" } {
          puts "WARNING: Could not initialize dispatch client"
        } else {
          puts "INFO: Dispatch client connection id - $connect_id"
          set connected true
        }
      } catch_res]} {
        puts "WARNING: failed to connect to dispatch server - $catch_res"
      }
    }
  }
}
if {$::dispatch::connected} {
  # Remove the dummy proc if it exists.
  if { [expr {[llength [info procs ::OPTRACE]] > 0}] } {
    rename ::OPTRACE ""
  }
  proc ::OPTRACE { task action {tags {} } } {
    ::vitis_log::op_trace "$task" $action -tags $tags -script $::optrace::script -category $::optrace::category
  }
  # dispatch is generic. We specifically want to attach logging.
  ::vitis_log::connect_client
} else {
  # Add dummy proc if it doesn't exist.
  if { [expr {[llength [info procs ::OPTRACE]] == 0}] } {
    proc ::OPTRACE {{arg1 \"\" } {arg2 \"\"} {arg3 \"\" } {arg4 \"\"} {arg5 \"\" } {arg6 \"\"}} {
        # Do nothing
    }
  }
}

OPTRACE "synth_1" START { ROLLUP_AUTO }
OPTRACE "Creating in-memory project" START { }
create_project -in_memory -part xc7z020clg484-1

set_param project.singleFileAddWarning.threshold 0
set_param project.compositeFile.enableAutoGeneration 0
set_param synth.vivado.isSynthRun true
set_msg_config -source 4 -id {IP_Flow 19-2162} -severity warning -new_severity info
set_property webtalk.parent_dir E:/robot/project/FPGA/ZedBoard/lab_4/lab_4.cache/wt [current_project]
set_property parent.project_path E:/robot/project/FPGA/ZedBoard/lab_4/lab_4.xpr [current_project]
set_property XPM_LIBRARIES XPM_CDC [current_project]
set_property default_lib xil_defaultlib [current_project]
set_property target_language Verilog [current_project]
set_property ip_output_repo e:/robot/project/FPGA/ZedBoard/lab_4/lab_4.cache/ip [current_project]
set_property ip_cache_permissions {read write} [current_project]
OPTRACE "Creating in-memory project" END { }
OPTRACE "Adding files" START { }
read_verilog -library xil_defaultlib {
  E:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/sim/char_fifo.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/clk_div.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/clk_gen.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/clkx_bus.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/cmd_parse.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/dac_spi.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/debouncer.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/lb_ctl.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/meta_harden.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/out_ddr_flop.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/reset_bridge.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/resp_gen.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/rst_gen.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/samp_gen.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/samp_ram.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/to_bcd.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/uart_baud_gen.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/uart_rx.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/uart_rx_ctl.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/uart_tx.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/uart_tx_ctl.v
  E:/robot/project/FPGA/ZedBoard/lab4_sources/wave_gen.v
}
read_ip -quiet E:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo.xci
set_property used_in_synthesis false [get_files -all e:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo/example_design/char_fifo_exdes.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo/example_design/char_fifo_exdes.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo/char_fifo_clocks.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo/char_fifo.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab4_sources/ip/char_fifo/char_fifo/char_fifo_ooc.xdc]

read_ip -quiet E:/robot/project/FPGA/ZedBoard/lab_4/lab_4.srcs/sources_1/ip/clk_core/clk_core.xci
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab_4/lab_4.gen/sources_1/ip/clk_core/clk_core_board.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab_4/lab_4.gen/sources_1/ip/clk_core/clk_core.xdc]
set_property used_in_implementation false [get_files -all e:/robot/project/FPGA/ZedBoard/lab_4/lab_4.gen/sources_1/ip/clk_core/clk_core_ooc.xdc]

OPTRACE "Adding files" END { }
# Mark all dcp files as not used in implementation to prevent them from being
# stitched into the results of this synthesis run. Any black boxes in the
# design are intentionally left as such for best results. Dcp files will be
# stitched into the design at a later time, either when this synthesis run is
# opened, or when it is stitched into a dependent implementation run.
foreach dcp [get_files -quiet -all -filter file_type=="Design\ Checkpoint"] {
  set_property used_in_implementation false $dcp
}
read_xdc E:/robot/project/FPGA/ZedBoard/lab4_sources/wave_gen_pins.xdc
set_property used_in_implementation false [get_files E:/robot/project/FPGA/ZedBoard/lab4_sources/wave_gen_pins.xdc]

read_xdc E:/robot/project/FPGA/ZedBoard/lab4_sources/wave_gen_timing.xdc
set_property used_in_implementation false [get_files E:/robot/project/FPGA/ZedBoard/lab4_sources/wave_gen_timing.xdc]

read_xdc dont_touch.xdc
set_property used_in_implementation false [get_files dont_touch.xdc]
set_param ips.enableIPCacheLiteLoad 1
close [open __synthesis_is_running__ w]

OPTRACE "synth_design" START { }
synth_design -top wave_gen -part xc7z020clg484-1
OPTRACE "synth_design" END { }
if { [get_msg_config -count -severity {CRITICAL WARNING}] > 0 } {
 send_msg_id runtcl-6 info "Synthesis results are not added to the cache due to CRITICAL_WARNING"
}


OPTRACE "write_checkpoint" START { CHECKPOINT }
# disable binary constraint mode for synth run checkpoints
set_param constraints.enableBinaryConstraints false
write_checkpoint -force -noxdef wave_gen.dcp
OPTRACE "write_checkpoint" END { }
OPTRACE "synth reports" START { REPORT }
generate_parallel_reports -reports { "report_utilization -file wave_gen_utilization_synth.rpt -pb wave_gen_utilization_synth.pb"  } 
OPTRACE "synth reports" END { }
file delete __synthesis_is_running__
close [open __synthesis_is_complete__ w]
OPTRACE "synth_1" END { }
